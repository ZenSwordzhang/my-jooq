input {
    http {
        port => 9601
        codec => "json"
    }
    beats {
        port => 9602
    }
}

filter {
    if "beats_input_codec_plain_applied" in [tags] {
        mutate {
            remove_tag => ["beats_input_codec_plain_applied"]
        }
    }
    #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
    if [message] =~ "\tat" {
        grok {
            match => ["message", "^(\tat)"]
            add_tag => ["stacktrace"]
        }
    }
    if [source] == "spring" and [type] == "logs" {
        grok {
            # Do multiline matching with (?m) as the above mutliline filter may add newlines to the log messages.
            match => [ "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:logLevel}%{SPACE}%{NUMBER:pid}%{SPACE}---%{SPACE}\[%{SPACE}%{DATA:thread}\]%{SPACE}%{NOTSPACE:class}%{SPACE}:%{SPACE}%{GREEDYDATA:message}" ]
            overwrite => [ "message" ]
        }
        ruby {
            code => "
                path = event.get('log')['file']['path']
                if (!path.nil?) && (!path.empty?)
                    event.set('app', path.split('/')[-2])
                end
            "
        }
    } else if [source] == "facility" {
        grok {
            # postgres slow query log
            match => [
                    "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp}%{SPACE}(?<timezone>(?:[PMCE][SD]T|UTC|GMT))%{SPACE}\[%{POSINT:pid}\]%{SPACE}%{WORD:logLevel}:%{SPACE}duration:%{SPACE}%{NUMBER:duration}%{SPACE}ms%{SPACE}execute%{SPACE}%{GREEDYDATA:client}:%{SPACE}%{GREEDYDATA:message}",
                    "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp}%{SPACE}(?<timezone>(?:[PMCE][SD]T|UTC|GMT))%{SPACE}\[%{POSINT:pid}\]%{SPACE}%{WORD:logLevel}:%{SPACE}duration:%{SPACE}%{NUMBER:duration}%{SPACE}ms%{SPACE}parse%{SPACE}%{GREEDYDATA:client}:%{SPACE}%{GREEDYDATA:message}",
                    "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp}%{SPACE}(?<timezone>(?:[PMCE][SD]T|UTC|GMT))%{SPACE}\[%{POSINT:pid}\]%{SPACE}%{WORD:logLevel}:%{SPACE}duration:%{SPACE}%{NUMBER:duration}%{SPACE}ms%{SPACE}bind%{SPACE}%{GREEDYDATA:client}:%{SPACE}%{GREEDYDATA:message}",
                    "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp}%{SPACE}(?<timezone>(?:[PMCE][SD]T|UTC|GMT))%{SPACE}\[%{POSINT:pid}\]%{SPACE}%{WORD:logLevel}:%{SPACE}duration:%{SPACE}%{NUMBER:duration}%{SPACE}ms%{SPACE}statement:%{SPACE}%{GREEDYDATA:message}"
            ]
            overwrite => [ "message" ]
        }

    }
    if [timezone] and [timestamp] {
        date {
            match => ["timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss", "YYYY-MM-dd HH:mm:ss.ZZZ", "yyyy-MM-dd'T'HH:mm:ss.ZZZ"]
            target => "timestamp"
            timezone => "%{[timezone]}"
        }
    } else {
        date {
            match => ["timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss", "YYYY-MM-dd HH:mm:ss.ZZZ", "yyyy-MM-dd'T'HH:mm:ss.ZZZ"]
            target => "timestamp"
        }
    }
}

output {
    if [type] == "metrics" {
        elasticsearch {
            hosts => ["es:9200"]
            manage_template => false
            index => "%{[env]}-%{[source]}-%{[type]}-%{+YYYYMMdd}"
        }
    } else {
        elasticsearch {
            hosts => ["es:9200"]
            manage_template => false
            index => "%{[env]}-%{[source]}-%{[type]}-%{[from]}-%{+YYYYMMdd}"
        }
    }
    # stdout { codec => rubydebug }
}
