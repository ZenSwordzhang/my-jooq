version: '3'

networks:
  shared:
    external:
      name: shared

services:
  elasticsearch:
    image: elasticsearch:7.7.0
    container_name: elasticsearch
    # restart: always
    environment:
      cluster: name=elasticsearch
      discovery: type=single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    # ro meaning readonly
    volumes:
      - ${PWD}/config/es-plugins:/usr/share/elasticsearch/plugins
      - ${PWD}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ${PWD}/data/es:/usr/share/elasticsearch/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - shared

  logstash:
    image: logstash:7.7.0
    container_name: logstash
    # restart: always
    command: bash -c "bin/logstash -f /usr/share/logstash/config/logstash.conf --config.reload.automatic"
    volumes:
      - ${PWD}/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ${PWD}/config/logstash.conf:/usr/share/logstash/config/logstash.conf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - elasticsearch
    links:
      - elasticsearch:es
    ports:
      - 9600:9600
      - 9601:9601
      - 9602:9602
    networks:
      - shared

  kibana:
    image: kibana:7.7.0
    container_name: kibana
    # restart: always
    links:
      - elasticsearch:es
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - elasticsearch
    environment:
      - "elasticsearch.hosts=http://es:9200"
    ports:
      - 9500:5601
    networks:
      - shared

  metricbeat:
    image: elastic/metricbeat:7.7.0
    container_name: metricbeat
    user: root
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["--strict.perms=false"]
    volumes:
      - ${PWD}/config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - shared

  redis:
    image: redis:buster
    container_name: redis-6379
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ${PWD}/config/redis.conf:/usr/local/etc/redis/redis.conf
      - ${PWD}/data/redis:/data
      - ${PWD}/log/redis:/var/log/redis
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 6379:6379
    networks:
      - shared

  nginx:
    image: nginx:stable
    container_name: nginx
    #    restart: always
    ports:
      - 80:80
      - 443:443
      - 8088:8088
    volumes:
      - ${PWD}/config/nginx.conf:/etc/nginx/nginx.conf
      - ${PWD}/log/nginx:/var/log/nginx
      - ${PWD}/../apps/html:/usr/share/nginx/html
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - shared

  postgres:
    image: postgres:13
    container_name: postgres
    # restart: always
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: test
    ports:
      # - 5432:5432
      - 5433:5432
    volumes:
      - ${PWD}/data/postgres:/var/lib/postgresql/data
      - ${PWD}/config/postgres.conf:/etc/postgresql/postgresql.conf
      - ${PWD}/log/postgres:/var/log/postgres
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    networks:
      - shared
